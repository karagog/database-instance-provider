name: Regression Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
    - name: Show JSON
      run: echo "${{ toJson(job) }}"

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - uses: actions/checkout@v2

    - name: Check Golang Format
      run: gofmt -s -w .

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  deploy-dev-container:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./containers/mysql/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mysql-db-provider:dev

  integration-test:
    runs-on: ubuntu-latest
    needs: deploy-dev-container

    # Run the tests inside the container so they have direct access to the service containers.
    container:
      image:  golang:1.17

    services:
      # The database provider is needed to spawn database instances for
      # unit integration tests.
      database:
        image: mysql:8.0
        volumes:
          - "tmpfs:/var/lib/mysql"
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_ROOT_HOST: "%"

      provider:
        image: karagog/mysql-db-provider:dev
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_ROOT_HOST: "%"

          # We can reference the service's hostname because it's running in a Docker container.
          PROVIDER_MYSQL_ADDRESS: database
          PROVIDER_MYSQL_PORT: 3306
          PROVIDER_PORT: 58615
          PROVIDER_MYSQL_USER: test
          PROVIDER_MYSQL_USER_PASSWORD: test
          PROVIDER_DB_INSTANCES: 20

    steps:
    - uses: actions/checkout@v2

    # Keep this around (but commented) because it can be useful to debug why a service is unavailable.
    # - name: Show logs
    #   run: |
    #     echo "${{ toJson(job) }}"
    #     docker logs "${{ job.services.provider.id }}"
    #     docker logs "${{ job.services.database.id }}"

    - name: Test
      # Run all unit tests plus integration tests. We can safely run integration tests because
      # we set up the necessary service containers.
      run: go test -v ./... -tags=integration
      env: 
          # This tells unit tests where to find the instance provider. The hostname lookup works
          # only because the tests are running in a Docker environment with the
          # service containers present.
          DB_INSTANCE_PROVIDER_ADDRESS: provider:58615

  # TODO: Is it possible (and safe) to update the tag from dev->latest without rebuilding?
  deploy-latest-container:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./containers/mysql/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mysql-db-provider:latest